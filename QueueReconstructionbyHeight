/*
Suppose you have a random list of people standing in a queue. Each person is described by a pair of integers (h, k), where h is the height of the person and k is the number of people in front of this person who have a height greater than or equal to h. Write an algorithm to reconstruct the queue.

Note:
The number of people is less than 1,100.

 
Example

Input:
[[7,0], [4,4], [7,1], [5,0], [6,1], [5,2]]

Output:
[[5,0], [7,0], [5,2], [6,1], [4,4], [7,1]]
*/

class Solution {
    
    public int[][] reconstructQueue(int[][] people) {
        
        class Tuple{
            int height;
            int pos;
            
            Tuple(int height, int pos){
                this.height=height;
                this.pos=pos;
            }
        };
        
        int len=people.length;
        Tuple[] tuple=new Tuple[len];
        for(int i=0;i<len;i++){
            tuple[i]=new Tuple(people[i][0],people[i][1]);
        }
        
        Arrays.sort(tuple, new Comparator<Tuple>(){
           public int compare(Tuple a, Tuple b){
               if(a.height==b.height){
                   return (a.pos-b.pos);
               }
               else return (-1)* (a.height-b.height);
           } 
        });
        
        int[][] result=new int[len][2];
        
        ArrayList<Tuple> res=new ArrayList<>(len);
        
        for(int i=0;i<len;i++){
            res.add(tuple[i].pos,tuple[i]);
        }
        
        for(int i=0;i<len;i++){
            result[i][0]=res.get(i).height;
            result[i][1]=res.get(i).pos;
        }
        
        return result;
    }
}
